plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.4'
	id 'io.spring.dependency-management' version '1.1.3'
}

group = 'org.pageflow'
version = '0.1'

java {
	sourceCompatibility = '17'
}

compileJava {
	options.compilerArgs << '-parameters'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-test'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.springframework.boot:spring-boot-starter'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'}

tasks.named('test') {
	useJUnitPlatform()
}

// flush redis cache
tasks.register('flushRedis', Exec) {
	commandLine 'redis-cli', 'flushall'
}

// 윈도우 용: redis 서버 프로세스 재시작
tasks.register('restartRedisServerOnWindow', Exec) {
	println 'Stopping Redis Server...'
	commandLine 'cmd', '/c', 'taskkill', '/F', '/IM', 'redis-server.exe'
	println 'Redis Server stopped.'
	println 'Starting Redis Server...'
//	commandLine 'cmd', '/c', 'start', '/B', 'C:\\Users\\gsw05\\OneDrive\\tools\\Redis-7.0.14-Windows-x64-with-Service\\redis-server.exe'
	println '##### Started Redis Server #####'
//	commandLine 'cmd', '/c', 'start', '/B', 'C:\\Users\\SBS\\Redis-x64-3.0.504\\redis-server.exe'
	commandLine 'cmd', '/c', 'start', '/B', 'C:\\Users\\user\\Redis-x64-3.0.504\\redis-server.exe'
	println('레디스가 실행중입니다.')
}


// 리액트 빌드
tasks.register('buildReact-book_write', Exec) {
	workingDir("src/main/react/book_write")
	commandLine "npm", "install"
	environment 'PUBLIC_URL', '/react/build/book_write'
	environment 'CI', 'false' // CI 환경에서의 빌드 성공을 위함. eslint 관련 에러들을 경고로 처리하도록

	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "cmd", "/c", "npm", "run", "build"
	} else {
		commandLine "npm", "run", "build"
	}
	println("book_write 리엑트를 빌드합니다...")
}
tasks.register('buildReact-book_viewer', Exec) {
	commandLine "npm", "install"
	workingDir("src/main/react/book_viewer")
	environment 'PUBLIC_URL', '/react/build/book_viewer'
	environment 'CI', 'false' // CI 환경에서의 빌드 성공을 위함. eslint 관련 에러들을 경고로 처리하도록

	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "cmd", "/c", "npm", "run", "build"
	} else {
		commandLine "npm", "run", "build"
	}

	println("book_viewer 리엑트를 빌드합니다...")
}


// 기존 리액트 빌드 디렉토리 삭제
tasks.register('clean-book_write', Delete) {
	dependsOn "buildReact-book_write"
	delete file('src/main/resources/static/react/build/book_write')
	println("book_write 빌드 디렉토리를 정리...")
}
tasks.register('clean-book_viewer', Delete) {
	dependsOn "buildReact-book_viewer"
	delete file('src/main/resources/static/react/build/book_viewer')
	println("book_viewer 빌드 디렉토리를 정리...")
}



tasks.register('copy-book_write', Copy) {
	dependsOn "clean-book_write"
	from file("src/main/react/book_write/build")
	into file('src/main/resources/static/react/build/book_write')
	println("book_write 빌드 파일을 복사했습니다.")
}
tasks.register('copy-book_viewer', Copy) {
	dependsOn "clean-book_viewer"
	from file("src/main/react/book_viewer/build")
	into file('src/main/resources/static/react/build/book_viewer')
	println("book_viewer 빌드 파일을 복사했습니다.")
}


tasks.register('encrypt-secrets', Exec) {
	// 먼저 application-secret.yml과 application-prod.yml, 그리고 .env.ci 파일을 git secret에 스테이징한다.
	commandLine "git", "secret", "add", ".env.ci"
	workingDir("src/main/resources")
	commandLine "git", "secret", "add", "application-secret.yml"
	commandLine "git", "secret", "add", "application-prod.yml"
	// git secret으로 암호화한다.
	commandLine "git", "secret", "hide"
}



